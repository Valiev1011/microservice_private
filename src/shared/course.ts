// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: protos/course.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'course';

export interface CreateCourseDto {
  title: string;
  description: string;
}

export interface Course {
  id: number;
  title: string;
  description: string;
}

export interface Pagination {
  page: string;
  limit: string;
}

export interface Courses {
  courses: Course[];
}

export interface OneDto {
  id: number;
}

export interface UpdateCourseDto {
  id: number;
  title: string;
  description: string;
}

export interface DeleteMessage {
  message: string;
}

export const COURSE_PACKAGE_NAME = 'course';

export interface CourseServiceClient {
  create(request: CreateCourseDto): Observable<Course>;

  getAll(request: Pagination): Observable<Courses>;

  getOne(request: OneDto): Observable<Course>;

  update(request: UpdateCourseDto): Observable<Course>;

  delete(request: OneDto): Observable<DeleteMessage>;
}

export interface CourseServiceController {
  create(
    request: CreateCourseDto,
  ): Promise<Course> | Observable<Course> | Course;

  getAll(request: Pagination): Promise<Courses> | Observable<Courses> | Courses;

  getOne(request: OneDto): Promise<Course> | Observable<Course> | Course;

  update(
    request: UpdateCourseDto,
  ): Promise<Course> | Observable<Course> | Course;

  delete(
    request: OneDto,
  ): Promise<DeleteMessage> | Observable<DeleteMessage> | DeleteMessage;
}

export function CourseServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create',
      'getAll',
      'getOne',
      'update',
      'delete',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CourseService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CourseService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COURSE_SERVICE_NAME = 'CourseService';
