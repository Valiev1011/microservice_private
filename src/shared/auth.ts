// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: protos/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface DeleteUserCourseDto {
  accessToken: string;
  courseId: number;
}

export interface GetUserCourseDto {
  accessToken: string;
}

export interface Courses {
  courses: Course[];
}

export interface Course {
  id: number;
  title: string;
  description: string;
}

export interface SetCourseDto {
  accessToken: string;
  courseId: number;
}

export interface SignUpDto {
  login: string;
  password: string;
}

export interface Tokens {
  accessToken: string;
  refreshToken: string;
}

export interface LoginDto {
  login: string;
  password: string;
}

export interface LogOutDto {
  accessToken: string;
}

export interface GetMeDto {
  accessToken: string;
}

export interface LogOutMessage {
  message: string;
}

export interface User {
  id: number;
  login: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  signup(request: SignUpDto): Observable<Tokens>;

  login(request: LoginDto): Observable<Tokens>;

  logout(request: LogOutDto): Observable<LogOutMessage>;

  getMe(request: GetMeDto): Observable<User>;

  setUserCourse(request: SetCourseDto): Observable<Course>;

  getUserCourses(request: GetUserCourseDto): Observable<Courses>;

  deleteUserCourse(request: DeleteUserCourseDto): Observable<Course>;
}

export interface AuthServiceController {
  signup(request: SignUpDto): Promise<Tokens> | Observable<Tokens> | Tokens;

  login(request: LoginDto): Promise<Tokens> | Observable<Tokens> | Tokens;

  logout(request: LogOutDto): Promise<LogOutMessage> | Observable<LogOutMessage> | LogOutMessage;

  getMe(request: GetMeDto): Promise<User> | Observable<User> | User;

  setUserCourse(request: SetCourseDto): Promise<Course> | Observable<Course> | Course;

  getUserCourses(request: GetUserCourseDto): Promise<Courses> | Observable<Courses> | Courses;

  deleteUserCourse(request: DeleteUserCourseDto): Promise<Course> | Observable<Course> | Course;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "signup",
      "login",
      "logout",
      "getMe",
      "setUserCourse",
      "getUserCourses",
      "deleteUserCourse",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
